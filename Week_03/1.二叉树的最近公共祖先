//给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。
//
// 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（
//一个节点也可以是它自己的祖先）。”
//
// 例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4]
//
//
//
//
//
// 示例 1:
//
// 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
//输出: 3
//解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
//
//
// 示例 2:
//
// 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
//输出: 5
//解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
//
//
//
//
// 说明:
//
//
// 所有节点的值都是唯一的。
// p、q 为不同节点且均存在于给定的二叉树中。
//
// Related Topics 树
// 👍 719 👎 0


//leetcode submit region begin(Prohibit modification and deletion)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    /**
         * 分析
         * 1. 终止条件
         *  root == null 或者 root等于p或者q(自己是自己的最近祖先节点)
         * 2.当前层逻辑(递归公式)
         *  递归左侧节点,返回值标记为left
         *  递归右侧节点, 返回值标记为right
         * 3.返回, 共计4种情况
         *  3.1 left和right都为空, 则说明Root的左右节点都不包含p、q,返回null]
         *  3.2 left和right都不为空, 则说明left和right在root的两侧, 说明root是最近祖先节点
         *  3.3 left为空, right不为空,: 则说明p、q都不在左侧节点中, 此时可以为分两种情况
         *      3.3.1 p和q都在右侧节点中, 则root为最近祖先节点
         *      3.3.2 p或者q有一个在右节点中, 则right指向p(或者q)
         *
         *  3.4 left不为空, right为空, 同3.3
         * @param root 根节点
         * @param p p节点
         * @param q q节点
         * @return 最近公共祖先
         */
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        // 1.终止条件
        if (root == null) {
            return null;
        }
        if (root.val == p.val || root.val == q.val) {
            // 说明自己本身就是自己的最近公共祖先节点
            return root;
        }
        // 2.处理当前层逻辑
        // 3.进入下一层
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        // 恢复当前层状态(不一定会有)
        if (left == null) {
            return right;
        }
        if (right == null) {
            return left;
        }
        return root;
    }
}
//leetcode submit region end(Prohibit modification and deletion)
